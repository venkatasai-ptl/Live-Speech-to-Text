# -*- coding: utf-8 -*-
"""whisper-trail.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tNWTOU9vwqJ1MIXGseDWx-48ELVYNsFZ
"""

pip install git+https://github.com/openai/whisper.git

import whisper

model = whisper.load_model("base")

model.device

from IPython.display import Audio
Audio("/harvard.wav")

# load audio and pad/trim it to fit 30 seconds
audio = whisper.load_audio("/harvard.wav")
audio = whisper.pad_or_trim(audio)

# make log-Mel spectrogram and move to the same device as the model
mel = whisper.log_mel_spectrogram(audio).to(model.device)

# detect the spoken language
_, probs = model.detect_language(mel)
print(f"Detected language: {max(probs, key=probs.get)}")

# decode the audio
options = whisper.DecodingOptions()
result = whisper.decode(model, mel, options)

# print the recognized text
print(result.text)

pip install --upgrade gradio

import gradio as gr
import time

def transcribe(audio):

    #time.sleep(3)
    # load audio and pad/trim it to fit 30 seconds
    audio = whisper.load_audio(audio)

    # make log-Mel spectrogram and move to the same device as the model
    mel = whisper.log_mel_spectrogram(whisper.pad_or_trim(audio)).to(model.device)

    # detect the spoken language
    _, probs = model.detect_language(mel)
    print(f"Detected language: {max(probs, key=probs.get)}")

    # decode the audio
    options = whisper.DecodingOptions()
    result = whisper.decode(model, mel, options)
    return result.text

gr.Interface(
    title = 'Whisper based Audio Transcription, Recognition and Translation Web App',
    fn=transcribe,
    inputs=[
        gr.Audio(sources=["microphone"], type="filepath")
    ],
    outputs=[
        "text"
    ],
    live=True).launch()